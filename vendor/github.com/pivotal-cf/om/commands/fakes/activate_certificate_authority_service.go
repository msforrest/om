// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type ActivateCertificateAuthorityService struct {
	ActivateCertificateAuthorityStub        func(api.ActivateCertificateAuthorityInput) error
	activateCertificateAuthorityMutex       sync.RWMutex
	activateCertificateAuthorityArgsForCall []struct {
		arg1 api.ActivateCertificateAuthorityInput
	}
	activateCertificateAuthorityReturns struct {
		result1 error
	}
	activateCertificateAuthorityReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ActivateCertificateAuthorityService) ActivateCertificateAuthority(arg1 api.ActivateCertificateAuthorityInput) error {
	fake.activateCertificateAuthorityMutex.Lock()
	ret, specificReturn := fake.activateCertificateAuthorityReturnsOnCall[len(fake.activateCertificateAuthorityArgsForCall)]
	fake.activateCertificateAuthorityArgsForCall = append(fake.activateCertificateAuthorityArgsForCall, struct {
		arg1 api.ActivateCertificateAuthorityInput
	}{arg1})
	fake.recordInvocation("ActivateCertificateAuthority", []interface{}{arg1})
	fake.activateCertificateAuthorityMutex.Unlock()
	if fake.ActivateCertificateAuthorityStub != nil {
		return fake.ActivateCertificateAuthorityStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.activateCertificateAuthorityReturns.result1
}

func (fake *ActivateCertificateAuthorityService) ActivateCertificateAuthorityCallCount() int {
	fake.activateCertificateAuthorityMutex.RLock()
	defer fake.activateCertificateAuthorityMutex.RUnlock()
	return len(fake.activateCertificateAuthorityArgsForCall)
}

func (fake *ActivateCertificateAuthorityService) ActivateCertificateAuthorityArgsForCall(i int) api.ActivateCertificateAuthorityInput {
	fake.activateCertificateAuthorityMutex.RLock()
	defer fake.activateCertificateAuthorityMutex.RUnlock()
	return fake.activateCertificateAuthorityArgsForCall[i].arg1
}

func (fake *ActivateCertificateAuthorityService) ActivateCertificateAuthorityReturns(result1 error) {
	fake.ActivateCertificateAuthorityStub = nil
	fake.activateCertificateAuthorityReturns = struct {
		result1 error
	}{result1}
}

func (fake *ActivateCertificateAuthorityService) ActivateCertificateAuthorityReturnsOnCall(i int, result1 error) {
	fake.ActivateCertificateAuthorityStub = nil
	if fake.activateCertificateAuthorityReturnsOnCall == nil {
		fake.activateCertificateAuthorityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.activateCertificateAuthorityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ActivateCertificateAuthorityService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.activateCertificateAuthorityMutex.RLock()
	defer fake.activateCertificateAuthorityMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ActivateCertificateAuthorityService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
