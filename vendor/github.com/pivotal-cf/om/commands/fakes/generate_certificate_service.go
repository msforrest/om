// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type GenerateCertificateService struct {
	GenerateCertificateStub        func(string) (string, error)
	generateCertificateMutex       sync.RWMutex
	generateCertificateArgsForCall []struct {
		arg1 string
	}
	generateCertificateReturns struct {
		result1 string
		result2 error
	}
	generateCertificateReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *GenerateCertificateService) GenerateCertificate(arg1 string) (string, error) {
	fake.generateCertificateMutex.Lock()
	ret, specificReturn := fake.generateCertificateReturnsOnCall[len(fake.generateCertificateArgsForCall)]
	fake.generateCertificateArgsForCall = append(fake.generateCertificateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GenerateCertificate", []interface{}{arg1})
	fake.generateCertificateMutex.Unlock()
	if fake.GenerateCertificateStub != nil {
		return fake.GenerateCertificateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateCertificateReturns.result1, fake.generateCertificateReturns.result2
}

func (fake *GenerateCertificateService) GenerateCertificateCallCount() int {
	fake.generateCertificateMutex.RLock()
	defer fake.generateCertificateMutex.RUnlock()
	return len(fake.generateCertificateArgsForCall)
}

func (fake *GenerateCertificateService) GenerateCertificateArgsForCall(i int) string {
	fake.generateCertificateMutex.RLock()
	defer fake.generateCertificateMutex.RUnlock()
	return fake.generateCertificateArgsForCall[i].arg1
}

func (fake *GenerateCertificateService) GenerateCertificateReturns(result1 string, result2 error) {
	fake.GenerateCertificateStub = nil
	fake.generateCertificateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *GenerateCertificateService) GenerateCertificateReturnsOnCall(i int, result1 string, result2 error) {
	fake.GenerateCertificateStub = nil
	if fake.generateCertificateReturnsOnCall == nil {
		fake.generateCertificateReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateCertificateReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *GenerateCertificateService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateCertificateMutex.RLock()
	defer fake.generateCertificateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *GenerateCertificateService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
