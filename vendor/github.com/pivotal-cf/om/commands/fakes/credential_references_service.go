// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type CredentialReferencesService struct {
	ListDeployedProductCredentialsStub        func(deployedProductGUID string) (api.CredentialReferencesOutput, error)
	listDeployedProductCredentialsMutex       sync.RWMutex
	listDeployedProductCredentialsArgsForCall []struct {
		deployedProductGUID string
	}
	listDeployedProductCredentialsReturns struct {
		result1 api.CredentialReferencesOutput
		result2 error
	}
	listDeployedProductCredentialsReturnsOnCall map[int]struct {
		result1 api.CredentialReferencesOutput
		result2 error
	}
	ListDeployedProductsStub        func() ([]api.DeployedProductOutput, error)
	listDeployedProductsMutex       sync.RWMutex
	listDeployedProductsArgsForCall []struct{}
	listDeployedProductsReturns     struct {
		result1 []api.DeployedProductOutput
		result2 error
	}
	listDeployedProductsReturnsOnCall map[int]struct {
		result1 []api.DeployedProductOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CredentialReferencesService) ListDeployedProductCredentials(deployedProductGUID string) (api.CredentialReferencesOutput, error) {
	fake.listDeployedProductCredentialsMutex.Lock()
	ret, specificReturn := fake.listDeployedProductCredentialsReturnsOnCall[len(fake.listDeployedProductCredentialsArgsForCall)]
	fake.listDeployedProductCredentialsArgsForCall = append(fake.listDeployedProductCredentialsArgsForCall, struct {
		deployedProductGUID string
	}{deployedProductGUID})
	fake.recordInvocation("ListDeployedProductCredentials", []interface{}{deployedProductGUID})
	fake.listDeployedProductCredentialsMutex.Unlock()
	if fake.ListDeployedProductCredentialsStub != nil {
		return fake.ListDeployedProductCredentialsStub(deployedProductGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listDeployedProductCredentialsReturns.result1, fake.listDeployedProductCredentialsReturns.result2
}

func (fake *CredentialReferencesService) ListDeployedProductCredentialsCallCount() int {
	fake.listDeployedProductCredentialsMutex.RLock()
	defer fake.listDeployedProductCredentialsMutex.RUnlock()
	return len(fake.listDeployedProductCredentialsArgsForCall)
}

func (fake *CredentialReferencesService) ListDeployedProductCredentialsArgsForCall(i int) string {
	fake.listDeployedProductCredentialsMutex.RLock()
	defer fake.listDeployedProductCredentialsMutex.RUnlock()
	return fake.listDeployedProductCredentialsArgsForCall[i].deployedProductGUID
}

func (fake *CredentialReferencesService) ListDeployedProductCredentialsReturns(result1 api.CredentialReferencesOutput, result2 error) {
	fake.ListDeployedProductCredentialsStub = nil
	fake.listDeployedProductCredentialsReturns = struct {
		result1 api.CredentialReferencesOutput
		result2 error
	}{result1, result2}
}

func (fake *CredentialReferencesService) ListDeployedProductCredentialsReturnsOnCall(i int, result1 api.CredentialReferencesOutput, result2 error) {
	fake.ListDeployedProductCredentialsStub = nil
	if fake.listDeployedProductCredentialsReturnsOnCall == nil {
		fake.listDeployedProductCredentialsReturnsOnCall = make(map[int]struct {
			result1 api.CredentialReferencesOutput
			result2 error
		})
	}
	fake.listDeployedProductCredentialsReturnsOnCall[i] = struct {
		result1 api.CredentialReferencesOutput
		result2 error
	}{result1, result2}
}

func (fake *CredentialReferencesService) ListDeployedProducts() ([]api.DeployedProductOutput, error) {
	fake.listDeployedProductsMutex.Lock()
	ret, specificReturn := fake.listDeployedProductsReturnsOnCall[len(fake.listDeployedProductsArgsForCall)]
	fake.listDeployedProductsArgsForCall = append(fake.listDeployedProductsArgsForCall, struct{}{})
	fake.recordInvocation("ListDeployedProducts", []interface{}{})
	fake.listDeployedProductsMutex.Unlock()
	if fake.ListDeployedProductsStub != nil {
		return fake.ListDeployedProductsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listDeployedProductsReturns.result1, fake.listDeployedProductsReturns.result2
}

func (fake *CredentialReferencesService) ListDeployedProductsCallCount() int {
	fake.listDeployedProductsMutex.RLock()
	defer fake.listDeployedProductsMutex.RUnlock()
	return len(fake.listDeployedProductsArgsForCall)
}

func (fake *CredentialReferencesService) ListDeployedProductsReturns(result1 []api.DeployedProductOutput, result2 error) {
	fake.ListDeployedProductsStub = nil
	fake.listDeployedProductsReturns = struct {
		result1 []api.DeployedProductOutput
		result2 error
	}{result1, result2}
}

func (fake *CredentialReferencesService) ListDeployedProductsReturnsOnCall(i int, result1 []api.DeployedProductOutput, result2 error) {
	fake.ListDeployedProductsStub = nil
	if fake.listDeployedProductsReturnsOnCall == nil {
		fake.listDeployedProductsReturnsOnCall = make(map[int]struct {
			result1 []api.DeployedProductOutput
			result2 error
		})
	}
	fake.listDeployedProductsReturnsOnCall[i] = struct {
		result1 []api.DeployedProductOutput
		result2 error
	}{result1, result2}
}

func (fake *CredentialReferencesService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listDeployedProductCredentialsMutex.RLock()
	defer fake.listDeployedProductCredentialsMutex.RUnlock()
	fake.listDeployedProductsMutex.RLock()
	defer fake.listDeployedProductsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CredentialReferencesService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
