// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"io"
	"sync"
)

type ProgressBar struct {
	StartStub             func()
	startMutex            sync.RWMutex
	startArgsForCall      []struct{}
	FinishStub            func()
	finishMutex           sync.RWMutex
	finishArgsForCall     []struct{}
	SetTotal64Stub        func(int64)
	setTotal64Mutex       sync.RWMutex
	setTotal64ArgsForCall []struct {
		arg1 int64
	}
	NewProxyReaderStub        func(io.Reader) io.ReadCloser
	newProxyReaderMutex       sync.RWMutex
	newProxyReaderArgsForCall []struct {
		arg1 io.Reader
	}
	newProxyReaderReturns struct {
		result1 io.ReadCloser
	}
	newProxyReaderReturnsOnCall map[int]struct {
		result1 io.ReadCloser
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProgressBar) Start() {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct{}{})
	fake.recordInvocation("Start", []interface{}{})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		fake.StartStub()
	}
}

func (fake *ProgressBar) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *ProgressBar) Finish() {
	fake.finishMutex.Lock()
	fake.finishArgsForCall = append(fake.finishArgsForCall, struct{}{})
	fake.recordInvocation("Finish", []interface{}{})
	fake.finishMutex.Unlock()
	if fake.FinishStub != nil {
		fake.FinishStub()
	}
}

func (fake *ProgressBar) FinishCallCount() int {
	fake.finishMutex.RLock()
	defer fake.finishMutex.RUnlock()
	return len(fake.finishArgsForCall)
}

func (fake *ProgressBar) SetTotal64(arg1 int64) {
	fake.setTotal64Mutex.Lock()
	fake.setTotal64ArgsForCall = append(fake.setTotal64ArgsForCall, struct {
		arg1 int64
	}{arg1})
	fake.recordInvocation("SetTotal64", []interface{}{arg1})
	fake.setTotal64Mutex.Unlock()
	if fake.SetTotal64Stub != nil {
		fake.SetTotal64Stub(arg1)
	}
}

func (fake *ProgressBar) SetTotal64CallCount() int {
	fake.setTotal64Mutex.RLock()
	defer fake.setTotal64Mutex.RUnlock()
	return len(fake.setTotal64ArgsForCall)
}

func (fake *ProgressBar) SetTotal64ArgsForCall(i int) int64 {
	fake.setTotal64Mutex.RLock()
	defer fake.setTotal64Mutex.RUnlock()
	return fake.setTotal64ArgsForCall[i].arg1
}

func (fake *ProgressBar) NewProxyReader(arg1 io.Reader) io.ReadCloser {
	fake.newProxyReaderMutex.Lock()
	ret, specificReturn := fake.newProxyReaderReturnsOnCall[len(fake.newProxyReaderArgsForCall)]
	fake.newProxyReaderArgsForCall = append(fake.newProxyReaderArgsForCall, struct {
		arg1 io.Reader
	}{arg1})
	fake.recordInvocation("NewProxyReader", []interface{}{arg1})
	fake.newProxyReaderMutex.Unlock()
	if fake.NewProxyReaderStub != nil {
		return fake.NewProxyReaderStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newProxyReaderReturns.result1
}

func (fake *ProgressBar) NewProxyReaderCallCount() int {
	fake.newProxyReaderMutex.RLock()
	defer fake.newProxyReaderMutex.RUnlock()
	return len(fake.newProxyReaderArgsForCall)
}

func (fake *ProgressBar) NewProxyReaderArgsForCall(i int) io.Reader {
	fake.newProxyReaderMutex.RLock()
	defer fake.newProxyReaderMutex.RUnlock()
	return fake.newProxyReaderArgsForCall[i].arg1
}

func (fake *ProgressBar) NewProxyReaderReturns(result1 io.ReadCloser) {
	fake.NewProxyReaderStub = nil
	fake.newProxyReaderReturns = struct {
		result1 io.ReadCloser
	}{result1}
}

func (fake *ProgressBar) NewProxyReaderReturnsOnCall(i int, result1 io.ReadCloser) {
	fake.NewProxyReaderStub = nil
	if fake.newProxyReaderReturnsOnCall == nil {
		fake.newProxyReaderReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
		})
	}
	fake.newProxyReaderReturnsOnCall[i] = struct {
		result1 io.ReadCloser
	}{result1}
}

func (fake *ProgressBar) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	fake.finishMutex.RLock()
	defer fake.finishMutex.RUnlock()
	fake.setTotal64Mutex.RLock()
	defer fake.setTotal64Mutex.RUnlock()
	fake.newProxyReaderMutex.RLock()
	defer fake.newProxyReaderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProgressBar) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
